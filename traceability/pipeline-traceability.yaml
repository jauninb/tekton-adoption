apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: traceability
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: cluster-region
    - name: cluster-name
    - name: cf-region
    - name: cf-org
    - name: cf-space
    - name: cf-app
    - name: pipeline-debug
  workspaces:
    - name: pipeline-ws      
  tasks:
    - name: clone
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "toolchain-apikey"
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: fetch-cluster-config
      taskRef: 
        name: iks-fetch-config
      params:
        - name: kubernetes-service-apikey-secret-key
          value: "toolchain-apikey"
        - name: cluster-region
          value: $(params.cluster-region)
        - name: cluster-name
          value: $(params.cluster-name)
      workspaces:
        - name: cluster-configuration
          workspace: pipeline-ws
    - name: fire-k8s-deployment-notification
      taskRef:
        name: toolchain-publish-deployable-mapping
      runAfter: [clone, fetch-cluster-config]
      params:
        - name: deployable-type
          value: "kubernetes_cluster"
        - name: deployable-region-id
          value: $(tasks.fetch-cluster-config.results.region)
        - name: deployable-guid
          value: $(tasks.fetch-cluster-config.results.cluster-id)
        - name: deployable-rg-id
          value: $(tasks.fetch-cluster-config.results.resource-group-id)
        - name: environment-label
          value: "k8s $(params.cluster-name) - namespace: TBD"
        - name: git-inputs
          value: |
            $(tasks.clone.results.git-repository),$(tasks.clone.results.git-commit),$(tasks.clone.results.git-branch)
            $(tasks.clone.results.git-repository),$(tasks.clone.results.git-commit),$(tasks.clone.results.git-branch)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: deploy-cf-app
      runAfter: [clone]
      taskRef:
        name: cf-deploy-app
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: cloud-foundry-apikey-secret-key
          value: "toolchain-apikey"
        - name: region
          value: $(params.cf-region)
        - name: cf-org
          value: $(params.cf-org)
        - name: cf-space
          value: $(params.cf-space)
        - name: cf-app
          value: $(params.cf-app)
        - name: cf-commands
          value: |
            #!/bin/bash
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: fire-cf-app-deployment-notification
      taskRef:
        name: toolchain-publish-deployable-mapping
      params:
        - name: deployable-type
          value: "app"
        - name: deployable-region-id
          value: $(tasks.deploy-cf-app.results.region)
        - name: deployable-guid
          value: $(tasks.deploy-cf-app.results.cf-app-guid)
        - name: deployable-cf-org-id
          value: $(tasks.deploy-cf-app.results.cf-org-id)
        - name: deployable-cf-org-name
          value: $(params.cf-org)
        - name: deployable-cf-space-id
          value: $(tasks.deploy-cf-app.results.cf-space-id)
        - name: deployable-cf-space-name
          value: $(params.cf-space)
        - name: environment-label
          value: "deployed app $(params.cf-app)"
        - name: git-inputs
          value: |
            $(tasks.clone.results.git-repository),$(tasks.clone.results.git-commit),$(tasks.clone.results.git-branch)
            $(tasks.clone.results.git-repository),$(tasks.clone.results.git-commit),$(tasks.clone.results.git-branch)
        - name: pipeline-debug
          value: $(params.pipeline-debug)