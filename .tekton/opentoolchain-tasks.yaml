apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: clone-repo-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the clone repository will be stored
      - name: repository
        description: the git repo url
      - name: revision
        description: the git revision
        default: master
      - name: apikey
        description: the ibmcloud api key
      - name: api
        description: the ibmcloud api url
        default: https://cloud.ibm.com
      - name: toolchainRegion
        description: the ibmcloud region hosting the toolchain
        default: us-south
      - name: toolchainId
        description: the ibmcloud region hosting the toolchain
      - name: propertiesFile
        description: file containing properties out of clone task
        default: build.properties
  steps:
    - name: fetch-git-token
      image: ibmcom/pipeline-base-image
      env:
        - name: HOME
          value: "/root"
        - name: API_KEY
          value: $(inputs.params.apikey)
        - name: API
          value: $(inputs.params.api)
        - name: REGION
          value: $(inputs.params.toolchainRegion)
        - name: TOOLCHAIN_ID
          value: $(inputs.params.toolchainId)
        - name: REPOSITORY
          value: $(inputs.params.repository)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Fetching token for $REPOSITORY";
          ibmcloud config --check-version false
          ibmcloud login -a $API -r $REGION --apikey $API_KEY
          TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
          curl -s -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${API}/devops/toolchains/${TOOLCHAIN_ID}?env_id=ibm:yp:${REGION}" -o _toolchain.json
          if [[ "$REPOSITORY" != *.git ]]; then
            echo "Adding .git suffix to Repository URL"
            REPOSITORY="${REPOSITORY}.git"
          fi
          GIT_TOKEN_URL=$(cat _toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url')
          GIT_SERVICE_INSTANCE_ID=$(cat _toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id')
          GIT_SERVICE_TYPE=$(cat _toolchain.json | jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .service_id')
          GIT_TOKEN=$(curl -s -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}?toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}" | jq -r '.access_token')
          if [ "$GIT_SERVICE_TYPE" == "github" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
            GIT_AUTH_USER="x-oauth-basic"
          elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
            GIT_AUTH_USER="oauth2"
          elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
            GIT_AUTH_USER="x-token-auth"
          else
            GIT_AUTH_USER="x-token-auth"
          fi
          echo "GIT_AUTH_USER=$GIT_AUTH_USER" > next-step-env.properties
          echo "GIT_TOKEN=$GIT_TOKEN" >> next-step-env.properties
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(inputs.params.repository)
        - name: REVISION
          value: $(inputs.params.revision)
        - name: PROPERTIES_FILE
          value: $(inputs.params.propertiesFile)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          GIT_URL=$REPOSITORY
          REPOSITORY=$(echo "$REPOSITORY" | sed -e "s/:\/\//:\/\/$GIT_AUTH_USER:$GIT_TOKEN@/g")
          mkdir -p /artifacts
          git clone -q -b $REVISION $REPOSITORY /artifacts
          workingdir=$(pwd)
          cd /artifacts
          GIT_BRANCH=$(cat .git/HEAD | awk -F/ '{print $3}')
          GIT_COMMIT=$(git show-ref --head | head -n1 | awk '{print $1}')
          cd $workingdir
          echo "GIT_URL=$GIT_URL" > $PROPERTIES_FILE
          echo "GIT_BRANCH=$GIT_BRANCH" >> $PROPERTIES_FILE
          echo "GIT_COMMIT=$GIT_COMMIT" >> $PROPERTIES_FILE
          echo "GIT_PREVIOUS_COMMIT=$GIT_PREVIOUS_COMMIT" >> $PROPERTIES_FILE
          cat $PROPERTIES_FILE
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
