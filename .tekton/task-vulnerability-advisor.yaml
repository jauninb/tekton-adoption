apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: vulnerability-advisor-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files (Dockerfile etc..) are expected to be
      - name: continuous-delivery-context-configmap
        description: name of the configmap containing the continuous delivery pipeline context
        default: cd-config
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
    resources:
      - name: image
        type: image
  steps:
    - name: check-registry
      image: ibmcom/pipeline-base-image
      workingDir: /steps
      env:
        - name: API
          valueFrom:
            configMapKeyRef:
              name: $(inputs.params.continuous-delivery-context-configmap)
              key: API
        - name: REGION
          valueFrom:
            configMapKeyRef:
              name: $(inputs.params.continuous-delivery-context-configmap)
              key: REGION
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: API_KEY
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          # Parse the image url to find information (region, namespace, image name)
          echo "$(inputs.resources.image.url)"

          ls -l -R /workspace

      volumeMounts:
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
