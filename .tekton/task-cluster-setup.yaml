apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: ibmcloud-cluster-context
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files (Dockerfile etc..) are expected to be
      - name: ibmcloudApi
        description: the ibmcloud api
        default: https://cloud.ibm.com
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: resourceGroup
        description: target resource group (name or id) for the ibmcloud login operation
        default: ''
      - name: clusterRegion
        description: the ibmcloud region hosting the cluster (if none is found it will default to the toolchain region)
        default: ''
      - name: clusterName
        description: the ibmcloud cluster name (default to the cluster pipelineresource name)
        default: ''
      - name: clusterPipelineResourcesDirectoryFallback
        description: directory in the task-pvc that will be used as a fallback mechanism to provide the kubeconfig file
        default: tekton-cluster-pipeline-resources
    resources:
      - name: cluster
        type: cluster
  outputs:
    resources:
      - name: cluster
        type: cluster    
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(inputs.params.continuous-delivery-context-secret)
            key: API_KEY
  steps:
    - name: setup
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          ibmcloud config --check-version false
          ibmcloud login -a $(inputs.params.ibmcloudApi) -r $TOOLCHAIN_REGION --apikey $API_KEY
          if [ "$(inputs.params.clusterRegion)" ]; then
            ibmcloud target -r $(inputs.params.clusterRegion)
          else 
            ibmcloud target -r $(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          fi
          # Look for the cluster
          if ibmcloud ks cluster get $(inputs.resources.cluster.name); then
            KUBECONFIG_FILE=$(ibmcloud ks cluster config $(inputs.resources.cluster.name) --export -s | awk -F= '{print $2}')
          else 
            echo "Cluster $(inputs.resources.cluster.name) not found. Accessible clusters are:"
            ibmcloud ks clusters
            exit 1
          fi

          # As PipelineResource Cluster are managed appropriately as input resources
          # but not as output resources, attempting to update the PipelineResource Cluster
          # that has been given (using kubeclt patch commands)
          # Verifying the access to pipeline resources
          if kubectl auth can-i get pipelineresources.tekton.dev; then
            echo "Processing $KUBECONFIG_FILE"
            K8S_USER_NAME=$(yq r $KUBECONFIG_FILE users[0].name)
            K8S_USER_TOKEN=$(yq r $KUBECONFIG_FILE users[0].user.auth-provider.config.id-token)
            K8S_CLUSTER_URL=$(yq r $KUBECONFIG_FILE clusters[0].cluster.server)
            CA_PEM_FILE="$(dirname $KUBECONFIG_FILE)/$(yq r $KUBECONFIG_FILE clusters[0].cluster.certificate-authority)"
            echo "CA_PEM_FILE is $CA_PEM_FILE"
            K8S_CLUSTER_CADATA=$(base64 -w0 $CA_PEM_FILE)
            echo "K8S_USER_NAME=$K8S_USER_NAME"
            echo "K8S_USER_TOKEN=$K8S_USER_TOKEN"
            echo "K8S_CLUSTER_URL=$K8S_CLUSTER_URL"
            echo "K8S_CLUSTER_CADATA=$K8S_CLUSTER_CADATA"
          else
            echo "Access to pipelineresources.tekton.dev is required to update Cluser Pipeline Resource accordingly"
            echo "Falling back to copy of $(basename $KUBECONFIG_FILE) to the pipeline run volume"
            mkdir -p /artifacts/$(inputs.params.clusterPipelineResourcesDirectoryFallback)/$(inputs.resources.cluster.name)
            cp $(dirname $KUBECONFIG_FILE)/$(yq r $KUBECONFIG_FILE clusters[0].cluster.certificate-authority) /artifacts/$(inputs.params.clusterPipelineResourcesDirectoryFallback)/$(inputs.resources.cluster.name)
            cp $KUBECONFIG_FILE /artifacts/$(inputs.params.clusterPipelineResourcesDirectoryFallback)/$(inputs.resources.cluster.name)/kubeconfig
            echo "Kubeconfig file(s) copied to /artifacts/$(inputs.params.clusterPipelineResourcesDirectoryFallback)/$(inputs.resources.cluster.name)"
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /cd-config
          name: cd-config-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json