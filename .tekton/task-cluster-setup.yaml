apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: ibmcloud-cluster-context
spec:
  inputs:
    params:
      - name: task-pvc
        description: the task pvc - this is the volume where the files (Dockerfile etc..) are expected to be
      - name: ibmcloudApi
        description: the ibmcloud api
        default: https://cloud.ibm.com
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
      - name: clusterRegion
        description: the ibmcloud region hosting the cluster
        default: us-south
      - name: clusterName
        description: the ibmcloud cluster name (default to the cluster pipelineresource name)
        default: ''
    resources:
      - name: cluster
        type: cluster
  outputs:
    resources:
      - name: cluster
        type: cluster    
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(inputs.params.continuous-delivery-context-secret)
            key: API_KEY
  steps:
    - name: setup
      image: ibmcom/pipeline-base-image
      workingDir: /artifacts
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          ls -l /
          ls -l -R /builder
          ls -l -R /workspace

          env | sort | grep -v -i key

          echo "Kubernetes Namespace: $NAMESPACE"
          kubectl config current-context
          if kubectl auth can-i get pipelineresources.tekton.dev; then
            echo "I can access pipelineresources.tekton.dev"
          else
            echo "I can not access pipelineresources.tekton.dev"
          fi
          #kubectl get all -n${NAMESPACE}

          echo "** kubeconfig content **"
          cat /workspace/$(inputs.resources.cluster.name)/kubeconfig

          echo "** toolchain.json content **"
          cat /cd-config/toolchain.json
          echo ""
          echo "****************************"
          TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
          TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
          TOOLCHAIN_RESOURCE_GROUP_ID=$(jq -r 'select(.container.type=="resource_group_id") | .container.guid' /cd-config/toolchain.json)
          echo "Toolchain id is $TOOLCHAIN_ID"
          echo "Toolchain region is $TOOLCHAIN_REGION"
          echo "Toolchain resource group id is $TOOLCHAIN_RESOURCE_GROUP_ID"
          #####################################
          ibmcloud config --check-version false
          ibmcloud login -a $(inputs.params.ibmcloudApi) -r $TOOLCHAIN_REGION --apikey $API_KEY
          if [ "$(inputs.params.clusterRegion)" ]; then
            ibmcloud target -r $(inputs.params.clusterRegion)
          fi
          ibmcloud cs clusters
          KUBECONFIG_FILE=$(ibmcloud ks cluster config mycluster --export -s | awk -F= '{print $2}')
          echo "Processing $KUBECONFIG_FILE"
          K8S_USER_NAME=$(yq r $KUBECONFIG_FILE users[0].name)
          K8S_USER_TOKEN=$(yq r $KUBECONFIG_FILE users[0].user.auth-provider.config.id-token)
          K8S_CLUSTER_URL=$(yq r $KUBECONFIG_FILE clusters[0].cluster.server)
          CA_PEM_FILE="$(dirname $KUBECONFIG_FILE)/$(yq r $KUBECONFIG_FILE clusters[0].cluster.certificate-authority)"
          echo "CA_PEM_FILE is $CA_PEM_FILE"
          K8S_CLUSTER_CADATA=$(base64 -w0 $CA_PEM_FILE)
          echo "K8S_USER_NAME=$K8S_USER_NAME"
          echo "K8S_USER_TOKEN=$K8S_USER_TOKEN"
          echo "K8S_CLUSTER_URL=$K8S_CLUSTER_URL"
          echo "K8S_CLUSTER_CADATA=$K8S_CLUSTER_CADATA"
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /cd-config
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json