apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: containerize-task
spec:
  inputs:
    params:
      - name: task-pvc
        description: the output pvc - this is where the clone repository will be stored
      # - name: apikey
      #   description: the ibmcloud api key
      # - name: api
      #   description: the ibmcloud api url
      #   default: https://cloud.ibm.com
      # - name: toolchainRegion
      #   description: the ibmcloud region hosting the toolchain
      #   default: us-south
      # - name: toolchainId
      #   description: the ibmcloud region hosting the toolchain
      # - name: propertiesFile
      #   description: file containing properties out of clone task
      #   default: build.properties
      - name: continuous-delivery-context-configmap
        description: name of the configmap containing the continuous delivery pipeline context
        default: cd-config
      - name: continuous-delivery-context-secret
        description: name of the configmap containing the continuous delivery pipeline context secrets
        default: cd-secret
  outputs:
    resources:
      - name: builtImage
        type: image
  steps:
    - name: check-registry
      image: ibmcom/pipeline-base-image
      workingDir: /steps
      env:
        - name: API
          valueFrom:
            configMapKeyRef:
              name: $(inputs.params.continuous-delivery-context-configmap)
              key: API
        - name: REGION
          valueFrom:
            configMapKeyRef:
              name: $(inputs.params.continuous-delivery-context-configmap)
              key: REGION
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.continuous-delivery-context-secret)
              key: API_KEY
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround 
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################
          # Parse the image url to find information (region, namespace, image name)
          IMAGE_URL=$(outputs.resources.builtImage.url)
          REGISTRY_URL=$(echo $(outputs.resources.builtImage.url) |  awk -F/ '{print $1}')
          REGISTRY_NAMESPACE=$(echo $(outputs.resources.builtImage.url) |  awk -F/ '{print $2}')
          IMAGE_NAME=$(echo $(outputs.resources.builtImage.url) |  awk -F/ '{print $3}')

          # Find the ibmcloud container registry region
          # https://cloud.ibm.com/docs/services/Registry?topic=registry-registry_overview#registry_regions_local
          if [[ $REGISTRY_URL =~ ^registry\.[a-z]*.bluemix.net$ ]]; then
            # deprecated domain name
            REGISTRY_REGION=$(echo $REGISTRY_URL | awk -F. '{print $2}')
            if [ "$REGISTRY_REGION" == "ng" ]; then
              REGISTRY_REGION="us-south"
            fi
          else
            export REGISTRY_REGION=$(echo $REGISTRY_URL | awk -F. '{print $1}')          
            if [ "$REGISTRY_REGION" == "jp" ]; then
              REGISTRY_REGION="ap-north"
            elif [ "$REGISTRY_REGION" == "au" ]; then
              REGISTRY_REGION="ap-south"
            elif [ "$REGISTRY_REGION" == "de" ]; then
              REGISTRY_REGION="eu-central"
            elif [ "$REGISTRY_REGION" == "uk" ]; then
              REGISTRY_REGION="uk-south"
            elif [ "$REGISTRY_REGION" == "us" ]; then
              REGISTRY_REGION="us-south"
            else 
              echo "No IBM Cloud Container Registry region found for the registry url $REGISTRY_URL"
              exit 1
            fi
          fi

          # ibmcloud login 
          ibmcloud config --check-version false
          ibmcloud login -a $API -r $REGION --apikey $API_KEY

          # Log container registry to the appropriate region
          ibmcloud cr region-set $REGISTRY_REGION

          # Create the namespace if needed to ensure the push will be can be successfull
          echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
          NS=$( ibmcloud cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
          if [ -z "${NS}" ]; then
              echo "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
              ibmcloud cr namespace-add ${REGISTRY_NAMESPACE}
              echo "Registry namespace ${REGISTRY_NAMESPACE} created."
          else 
              echo "Registry namespace ${REGISTRY_NAMESPACE} found."
          fi
          echo -e "Existing images in registry"
          ibmcloud cr images --restrict ${REGISTRY_NAMESPACE}
          
          # create a k8s secret yaml of type dockerconfig to transform into a docker config file
          # https://github.com/tektoncd/pipeline/blob/v0.7.0/docs/resources.md#image-resource

      volumeMounts:
        - mountPath: /steps
          name: steps-volume
    - name: build-docker-image
      image: registry.ng.bluemix.net/otc-images/otc-k8s-build:latest
      workingDir: /artifacts
      env:
        - name: HOME
          value: "/root"
        # - name: API_KEY
        #   value: $(inputs.params.apikey)
        # - name: API
        #   value: $(inputs.params.api)
        # - name: REGION
        #   value: $(inputs.params.toolchainRegion)
        # - name: TOOLCHAIN_ID
        #   value: $(inputs.params.toolchainId)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          ls -l -R /builder/home/image-outputs
          #sleep 180s
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /steps
          name: steps-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
